<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.it.every.admin.professor.model.ProfessorManageDAO">

	<insert id="professorRegister" parameterType="professorManageVo">
		<selectKey resultType="string" keyProperty="profNo" order="BEFORE">
			select 'P' || to_char(professor_seq.nextval, 'FM00000') from dual
		</selectKey>
		insert into professor(prof_no, position_no, dept_no, prof_name,
			prof_pwd, prof_ph, prof_email, prof_start_date, prof_end_date)
		values(#{profNo}, #{positionNo}, #{deptNo}, #{profName}, 
			#{profPwd}, #{profPh}, #{profEmail}, #{profStartDate}, #{profEndDate})
	</insert>

	<select id="selectAll" resultType="professorManageVo">
		select *
		from professor p join department d
		on p.dept_no = d.dept_no
		join prof_position pp
		on p.position_no = pp.position_no
		order by p.prof_no desc
	</select>
	
	<select id="selectByProfNo" parameterType="String" resultType="professorManageVo">
		select * from professor where prof_no=#{profNo}
	</select>
	
	<select id="selectByProfName" parameterType="String" resultType="professorManageVo">
		select * from professor where prof_name=#{profName}
	</select>
	
	<select id="selectByDeptNo" parameterType="String" resultType="professorManageVo">
		select * from professor where dept_no=#{deptNo}
	</select>
	
	<update id="updateProfessor" parameterType="professorManageVo">
		update professor
		set position_no=#{positionNo}, dept_no=#{deptNo}, prof_name=#{profName}, 
			prof_id=#{profId}, prof_pwd=#{profPwd}, prof_ph=#{profPh},
			prof_email=#{profEmail}, prof_start_date=#{profStartDate},
			prof_end_date=#{profEndDate}
		where prof_no = #{profNo}
	</update>
	
	<delete id="deleteProfessor" parameterType="string">
		delete from professor where prof_no=#{profNo}
	</delete>
	
	<select id="selectPosition" resultType="HashMap">
		select pp.position_name position, count(pp.position_name) count
		from professor p join prof_position pp
		on p.position_no = pp.position_no
		join department d
		on p.dept_no = d.dept_no
		where d.dept_name='경영학과'
		group by pp.position_name
		order by count desc
	</select>
	
	<select id="selectMajorPosition" parameterType="String" resultType="HashMap">
		select pp.position_name position, count(pp.position_name) count
		from professor p join prof_position pp
		on p.position_no = pp.position_no
		join department d
		on p.dept_no = d.dept_no
		where d.dept_name=#{deptName}
		group by pp.position_name
		order by count desc
	</select>
	
	<select id="selectProfLecRate" resultType="HashMap">
		select s.subj_name, p.prof_name, avg((e.q1+e.q2+e.q3+e.q4+e.q5)/5) rate
		from subj_eval e join open_subj o
		on e.open_sub_code = o.open_sub_code
		join subject s
		on o.subj_code = s.subj_code
		join professor p
		on o.prof_no = p.prof_no
		where p.prof_name = '홍교수' and s.subj_name = '데이터베이스'
		group by s.subj_name, p.prof_name
	</select>
	
	<select id="searchByProfNo" parameterType="HashMap" resultType="HashMap">
		select d.dept_name deptName, s.subj_name subjName, p.prof_name profName, 
		avg((e.q1+e.q2+e.q3+e.q4+e.q5)/5) rate
		from subj_eval e join open_subj o
		on e.open_sub_code = o.open_sub_code
		join subject s
		on o.subj_code = s.subj_code
		join professor p
		on o.prof_no = p.prof_no
		join department d
		on p.dept_no = d.dept_no
		where p.prof_no=#{profNo} and e.open_sub_code=#{subjNo}
		group by d.dept_name, s.subj_name, p.prof_name
	</select>
	
	
	<select id="selectDeptLecRate" resultType="HashMap">
		select d.dept_name, avg((e.q1+e.q2+e.q3+e.q4+e.q5)/5) result
		from subj_eval e join open_subj o
		on e.open_sub_code = o.open_sub_code
		join professor p
		on o.prof_no = p.prof_no
		join department d
		on p.dept_no = d.dept_no
		where d.dept_name = '경영학과'
		group by d.dept_name
	</select>
	
	<select id="selectAllLecRate" resultType="HashMap">
		select round(avg((e.q1+e.q2+e.q3+e.q4+e.q5)/5),2) result
		from subj_eval e join open_subj o
		on e.open_sub_code = o.open_sub_code
		join professor p
		on o.prof_no = p.prof_no
		join department d
		on p.dept_no = d.dept_no
	</select>
	
	<resultMap type="HashMap" id="clobChange">
		<result property="CONTENT" column="CONTENT" jdbcType="CLOB" javaType="java.lang.String" />
	</resultMap>
	<select id="selectLecComment" parameterType="HashMap" resultType="HashMap" resultMap="clobChange">
		select p.prof_name profName, s.subj_name subjName, e.content content
		from subj_eval e join open_subj o
		on e.open_sub_code = o.open_sub_code
		join subject s
		on o.subj_code = s.subj_code
		join professor p
		on o.prof_no = p.prof_no
		where p.prof_no=#{profNo} and e.open_sub_code=#{subjNo}
		<!-- where p.prof_name='홍교수' and s.subj_name = '데이터베이스' -->
	</select>
	
</mapper>









